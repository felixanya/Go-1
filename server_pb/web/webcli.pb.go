// Code generated by protoc-gen-go. DO NOT EDIT.
// source: webcli.proto

/*
Package web is a generated protocol buffer package.

It is generated from these files:
	webcli.proto

It has these top-level messages:
	RequestData
	ResponseData
*/
package web

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestData 请求数据
type RequestData struct {
	Cmd  string `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *RequestData) Reset()                    { *m = RequestData{} }
func (m *RequestData) String() string            { return proto.CompactTextString(m) }
func (*RequestData) ProtoMessage()               {}
func (*RequestData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestData) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *RequestData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ResponseData 响应数据
type ResponseData struct {
	Code int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *ResponseData) Reset()                    { *m = ResponseData{} }
func (m *ResponseData) String() string            { return proto.CompactTextString(m) }
func (*ResponseData) ProtoMessage()               {}
func (*ResponseData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ResponseData) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ResponseData) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *ResponseData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestData)(nil), "web.RequestData")
	proto.RegisterType((*ResponseData)(nil), "web.ResponseData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RequestHandler service

type RequestHandlerClient interface {
	Handle(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error)
}

type requestHandlerClient struct {
	cc *grpc.ClientConn
}

func NewRequestHandlerClient(cc *grpc.ClientConn) RequestHandlerClient {
	return &requestHandlerClient{cc}
}

func (c *requestHandlerClient) Handle(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ResponseData, error) {
	out := new(ResponseData)
	err := grpc.Invoke(ctx, "/web.RequestHandler/Handle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RequestHandler service

type RequestHandlerServer interface {
	Handle(context.Context, *RequestData) (*ResponseData, error)
}

func RegisterRequestHandlerServer(s *grpc.Server, srv RequestHandlerServer) {
	s.RegisterService(&_RequestHandler_serviceDesc, srv)
}

func _RequestHandler_Handle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RequestHandlerServer).Handle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/web.RequestHandler/Handle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RequestHandlerServer).Handle(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

var _RequestHandler_serviceDesc = grpc.ServiceDesc{
	ServiceName: "web.RequestHandler",
	HandlerType: (*RequestHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handle",
			Handler:    _RequestHandler_Handle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webcli.proto",
}

func init() { proto.RegisterFile("webcli.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 175 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x41, 0xca, 0x83, 0x30,
	0x10, 0x46, 0x7f, 0x7f, 0xad, 0xe0, 0x54, 0x8a, 0x9d, 0x95, 0x74, 0x25, 0xae, 0x5c, 0x59, 0xa8,
	0x27, 0x28, 0x74, 0xe1, 0x3a, 0x37, 0x48, 0xcc, 0x50, 0x0a, 0x6a, 0xac, 0x49, 0xf1, 0xfa, 0x25,
	0x53, 0xa9, 0xdd, 0x3d, 0x02, 0xef, 0x7d, 0x19, 0x48, 0x17, 0x52, 0x5d, 0xff, 0xa8, 0xa7, 0xd9,
	0x38, 0x83, 0xe1, 0x42, 0xaa, 0x6c, 0x60, 0x2f, 0xe8, 0xf9, 0x22, 0xeb, 0x6e, 0xd2, 0x49, 0xcc,
	0x20, 0xec, 0x06, 0x9d, 0x07, 0x45, 0x50, 0x25, 0xc2, 0x23, 0x22, 0x44, 0x5a, 0x3a, 0x99, 0xff,
	0x17, 0x41, 0x95, 0x0a, 0xe6, 0xb2, 0x85, 0x54, 0x90, 0x9d, 0xcc, 0x68, 0x89, 0x2d, 0x84, 0xa8,
	0x33, 0x9a, 0x58, 0xdb, 0x09, 0x66, 0x5f, 0x1a, 0xec, 0x9d, 0xb5, 0x44, 0x78, 0xfc, 0x96, 0xc2,
	0xad, 0x74, 0xb9, 0xc2, 0x61, 0x9d, 0x6f, 0xe5, 0xa8, 0x7b, 0x9a, 0xf1, 0x0c, 0xf1, 0x07, 0x31,
	0xab, 0x17, 0x52, 0xf5, 0xcf, 0xef, 0x4e, 0xc7, 0xf5, 0x65, 0x9b, 0x2e, 0xff, 0x54, 0xcc, 0xd7,
	0x34, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2f, 0xc4, 0x01, 0xeb, 0xdd, 0x00, 0x00, 0x00,
}
